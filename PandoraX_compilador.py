# compiler.py

import sys
import os
from antlr4 import *
from antlr4.error.ErrorListener import ErrorListener
from antlr4.tree.Trees import Trees

# Importa as classes geradas pelo ANTLR
from PandoraXLexer import PandoraXLexer
from PandoraXParser import PandoraXParser
from PandoraXVisitor import PandoraXVisitor

# --- NOSSAS PARTES DO COMPILADOR ---
from PandoraXSemanticAnalyzer import PandoraXSemanticAnalyzer # <-- Importado!
from PandoraX_executor import PandoraX_executor                 # <-- Importado!

# =====================================================================
# üîé FASE 1: AN√ÅLISE L√âXICA üîç
# =====================================================================

def print_tokens(token_stream, lexer):
    """Imprime todos os tokens identificados pelo analisador l√©xico."""
    print("\n=== TOKENS IDENTIFICADOS ===")
    for token in token_stream.tokens:
        if token.type != Token.EOF:
            token_name = lexer.symbolicNames[token.type]
            print(f"{token_name}: '{token.text}' (linha {token.line}, coluna {token.column})")
    print("============================\n")

# =====================================================================
# üèõÔ∏è FASE 2: ANALISADOR SINT√ÅTICO üèõÔ∏è
# =====================================================================

class PandoraXErrorListener(ErrorListener):
    """Listener customizado para parar a execu√ß√£o ao encontrar um erro sint√°tico."""
    def syntaxError(self, recognizer, offendingSymbol, line, column, msg, e):
        print(f"\n‚ÄºÔ∏è ERRO SINT√ÅTICO na linha {line}, coluna {column}: {msg}")
        sys.exit(1)

# =====================================================================
# üå≥ FASE 3: GERA√á√ÉO DA √ÅRVORE SINT√ÅTICA ABSTRATA (AST) üå≥
# =====================================================================

class PandoraXASTGenerator(PandoraXVisitor):
    """Gera uma representa√ß√£o da AST no formato .dot para visualiza√ß√£o."""
    # (Cole aqui a classe PandoraXASTGenerator da resposta anterior, ela n√£o muda)
    def __init__(self):
        self.dot = ['digraph AST {', '  node [shape=box, fontname="Courier"];']
        # ... resto da classe ...


# =====================================================================
# ‚öôÔ∏è FUN√á√ÉO PRINCIPAL (ORQUESTRADOR) ‚öôÔ∏è
# =====================================================================

def main():
    if len(sys.argv) < 2:
        print("Uso: python compiler.py <arquivo.pandoraX>")
        sys.exit(1)

    input_file = sys.argv[1]
    print(f"Compilando o arquivo: {input_file}")

    try:
        # Configura√ß√£o inicial
        input_stream = FileStream(input_file, encoding='utf-8')
        lexer = PandoraXLexer(input_stream)
        stream = CommonTokenStream(lexer)
        stream.fill()
        
        # --- Executa as fases do compilador ---
        
        # 1. An√°lise L√©xica
        print_tokens(stream, lexer)
        
        # 2. An√°lise Sint√°tica
        parser = PandoraXParser(stream)
        parser.removeErrorListeners()
        parser.addErrorListener(PandoraXErrorListener())
        tree = parser.program()
        print("‚úÖ An√°lise sint√°tica conclu√≠da com sucesso.")
        
        # 3. Gera√ß√£o da AST
        ast_generator = PandoraXASTGenerator()
        # (O c√≥digo para gerar e salvar o .dot vai aqui)
        
        # 4. An√°lise Sem√¢ntica (usando a classe importada)
        semantic_analyzer = PandoraXSemanticAnalyzer()
        errors, log = semantic_analyzer.visit(tree)
        print("\n--- Log de An√°lise Sem√¢ntica ---")
        for entry in log: print(entry)
        if errors:
            print("\n‚ÄºÔ∏è ERROS SEM√ÇNTICOS DETECTADOS ‚ÄºÔ∏è")
            for err in errors: print(f"Erro: {err}")
            sys.exit(1)
        else:
            print("‚úÖ An√°lise sem√¢ntica conclu√≠da com sucesso.")

        # 5. Execu√ß√£o (usando a classe importada)
        print("\n--- Executando o C√≥digo PandoraX ---")
        executor = PandoraX_executor()
        executor.visit(tree)
        print("----------------------------------")
        print("üöÄ Execu√ß√£o finalizada.")
        
    except SystemExit:
        print("\nCompila√ß√£o interrompida devido a erros.")
    except Exception as e:
        print(f"Ocorreu um erro inesperado: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()