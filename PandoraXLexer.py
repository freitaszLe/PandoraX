# Generated from PandoraX.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,27,188,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,1,0,1,0,5,0,58,8,0,10,0,12,0,61,9,0,1,1,4,1,64,8,1,11,1,
        12,1,65,1,2,1,2,1,2,1,2,1,2,1,2,5,2,74,8,2,10,2,12,2,77,9,2,1,2,
        1,2,1,3,4,3,82,8,3,11,3,12,3,83,1,3,1,3,1,4,1,4,1,4,1,4,5,4,92,8,
        4,10,4,12,4,95,9,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,
        8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,
        1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,
        1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,0,0,27,1,
        1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
        14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,
        25,51,26,53,27,1,0,6,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,
        97,122,1,0,48,57,4,0,60,60,62,62,123,123,125,125,3,0,9,10,13,13,
        32,32,2,0,10,10,13,13,193,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,
        7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
        1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
        1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,1,55,1,0,0,0,3,63,
        1,0,0,0,5,67,1,0,0,0,7,81,1,0,0,0,9,87,1,0,0,0,11,98,1,0,0,0,13,
        103,1,0,0,0,15,112,1,0,0,0,17,118,1,0,0,0,19,124,1,0,0,0,21,130,
        1,0,0,0,23,145,1,0,0,0,25,154,1,0,0,0,27,156,1,0,0,0,29,158,1,0,
        0,0,31,160,1,0,0,0,33,162,1,0,0,0,35,164,1,0,0,0,37,166,1,0,0,0,
        39,168,1,0,0,0,41,171,1,0,0,0,43,174,1,0,0,0,45,177,1,0,0,0,47,180,
        1,0,0,0,49,182,1,0,0,0,51,184,1,0,0,0,53,186,1,0,0,0,55,59,7,0,0,
        0,56,58,7,1,0,0,57,56,1,0,0,0,58,61,1,0,0,0,59,57,1,0,0,0,59,60,
        1,0,0,0,60,2,1,0,0,0,61,59,1,0,0,0,62,64,7,2,0,0,63,62,1,0,0,0,64,
        65,1,0,0,0,65,63,1,0,0,0,65,66,1,0,0,0,66,4,1,0,0,0,67,75,5,60,0,
        0,68,74,8,3,0,0,69,70,5,123,0,0,70,71,3,1,0,0,71,72,5,125,0,0,72,
        74,1,0,0,0,73,68,1,0,0,0,73,69,1,0,0,0,74,77,1,0,0,0,75,73,1,0,0,
        0,75,76,1,0,0,0,76,78,1,0,0,0,77,75,1,0,0,0,78,79,5,62,0,0,79,6,
        1,0,0,0,80,82,7,4,0,0,81,80,1,0,0,0,82,83,1,0,0,0,83,81,1,0,0,0,
        83,84,1,0,0,0,84,85,1,0,0,0,85,86,6,3,0,0,86,8,1,0,0,0,87,88,5,47,
        0,0,88,89,5,47,0,0,89,93,1,0,0,0,90,92,8,5,0,0,91,90,1,0,0,0,92,
        95,1,0,0,0,93,91,1,0,0,0,93,94,1,0,0,0,94,96,1,0,0,0,95,93,1,0,0,
        0,96,97,6,4,0,0,97,10,1,0,0,0,98,99,5,119,0,0,99,100,5,104,0,0,100,
        101,5,101,0,0,101,102,5,110,0,0,102,12,1,0,0,0,103,104,5,119,0,0,
        104,105,5,104,0,0,105,106,5,101,0,0,106,107,5,110,0,0,107,108,5,
        101,0,0,108,109,5,118,0,0,109,110,5,101,0,0,110,111,5,114,0,0,111,
        14,1,0,0,0,112,113,5,108,0,0,113,114,5,111,0,0,114,115,5,111,0,0,
        115,116,5,112,0,0,116,117,5,88,0,0,117,16,1,0,0,0,118,119,5,105,
        0,0,119,120,5,110,0,0,120,121,5,116,0,0,121,122,5,101,0,0,122,123,
        5,114,0,0,123,18,1,0,0,0,124,125,5,115,0,0,125,126,5,116,0,0,126,
        127,5,114,0,0,127,128,5,105,0,0,128,129,5,110,0,0,129,20,1,0,0,0,
        130,131,5,112,0,0,131,132,5,97,0,0,132,133,5,110,0,0,133,134,5,100,
        0,0,134,135,5,111,0,0,135,136,5,114,0,0,136,137,5,97,0,0,137,138,
        5,46,0,0,138,139,5,101,0,0,139,140,5,120,0,0,140,141,5,112,0,0,141,
        142,5,111,0,0,142,143,5,115,0,0,143,144,5,101,0,0,144,22,1,0,0,0,
        145,146,5,115,0,0,146,147,5,117,0,0,147,148,5,109,0,0,148,149,5,
        109,0,0,149,150,5,111,0,0,150,151,5,110,0,0,151,152,5,46,0,0,152,
        153,5,120,0,0,153,24,1,0,0,0,154,155,5,43,0,0,155,26,1,0,0,0,156,
        157,5,45,0,0,157,28,1,0,0,0,158,159,5,42,0,0,159,30,1,0,0,0,160,
        161,5,47,0,0,161,32,1,0,0,0,162,163,5,61,0,0,163,34,1,0,0,0,164,
        165,5,60,0,0,165,36,1,0,0,0,166,167,5,62,0,0,167,38,1,0,0,0,168,
        169,5,60,0,0,169,170,5,61,0,0,170,40,1,0,0,0,171,172,5,62,0,0,172,
        173,5,61,0,0,173,42,1,0,0,0,174,175,5,61,0,0,175,176,5,61,0,0,176,
        44,1,0,0,0,177,178,5,33,0,0,178,179,5,61,0,0,179,46,1,0,0,0,180,
        181,5,40,0,0,181,48,1,0,0,0,182,183,5,41,0,0,183,50,1,0,0,0,184,
        185,5,123,0,0,185,52,1,0,0,0,186,187,5,125,0,0,187,54,1,0,0,0,7,
        0,59,65,73,75,83,93,1,6,0,0
    ]

class PandoraXLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    ID = 1
    INT = 2
    INTERPOLATED_STRING = 3
    WS = 4
    COMMENT = 5
    WHEN = 6
    WHENEVER = 7
    LOOPX = 8
    INTER = 9
    STRIN = 10
    PANDORAEXPOSE = 11
    SUMMON = 12
    PLUS = 13
    MINUS = 14
    MULT = 15
    DIV = 16
    EQ = 17
    LT = 18
    GT = 19
    LE = 20
    GE = 21
    EQEQ = 22
    NEQ = 23
    LPAREN = 24
    RPAREN = 25
    LBRACE = 26
    RBRACE = 27

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'when'", "'whenever'", "'loopX'", "'inter'", "'strin'", "'pandora.expose'", 
            "'summon.x'", "'+'", "'-'", "'*'", "'/'", "'='", "'<'", "'>'", 
            "'<='", "'>='", "'=='", "'!='", "'('", "')'", "'{'", "'}'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "INT", "INTERPOLATED_STRING", "WS", "COMMENT", "WHEN", 
            "WHENEVER", "LOOPX", "INTER", "STRIN", "PANDORAEXPOSE", "SUMMON", 
            "PLUS", "MINUS", "MULT", "DIV", "EQ", "LT", "GT", "LE", "GE", 
            "EQEQ", "NEQ", "LPAREN", "RPAREN", "LBRACE", "RBRACE" ]

    ruleNames = [ "ID", "INT", "INTERPOLATED_STRING", "WS", "COMMENT", "WHEN", 
                  "WHENEVER", "LOOPX", "INTER", "STRIN", "PANDORAEXPOSE", 
                  "SUMMON", "PLUS", "MINUS", "MULT", "DIV", "EQ", "LT", 
                  "GT", "LE", "GE", "EQEQ", "NEQ", "LPAREN", "RPAREN", "LBRACE", 
                  "RBRACE" ]

    grammarFileName = "PandoraX.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


